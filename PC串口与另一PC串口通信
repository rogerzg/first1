#include "hal_defs.h"
#include "hal_cc8051.h"
#include "hal_int.h"
#include "hal_mcu.h"
#include "hal_board.h"
#include "hal_led.h"
#include "hal_rf.h"
#include "basic_rf.h"
#include "hal_uart.h" 
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#define MAX_SEND_BUF_LEN  128
#define MAX_RECV_BUF_LEN 128
static uint8 pTxData[MAX_SEND_BUF_LEN];//无线发送缓冲区大小
static uint8 pRxData[MAX_RECV_BUF_LEN]; 
#define MAX_UART_SEND_BUF_LEN  128
#define MAX_UART_RECV_BUF_LEN  128
uint8  uTxData[MAX_UART_SEND_BUF_LEN]; //串口发送缓冲区大小
uint8 uRxData[MAX_UART_RECV_BUF_LEN];
uint16 uTxlen = 0;
uint16 uRxlen = 0;
#define RF_CHANNEL    11  
#define PAN_ID    0x1A5B
#define MY_ADDR      0x1015     //0xAC3A
#define SEND_ADDR   0xAC3A      //0x1015   

static basicRfCfg_t basicRfConfig;
void MyByteCopy(uint8 *dst, int dststart, uint8 *src, int srcstart, int len)
{
int i;
for(i=0;i<len;i++)
{
*(dst+dststart+i)=*(src+srcstart+i);
}
}
uint16 RecvUartData(void)
{
uint16 r_UartLen=0;
uint8 r_UartBuf[128];
uRxlen=0;
r_UartLen=halUartRxLen();//读串口缓冲区，返回缓冲区的长度给r_UartLen
while(r_UartLen>0)
{
r_UartLen=halUartRead(r_UartBuf,sizeof(r_UartBuf));//r_UartLen =读串口字符长度
MyByteCopy(uRxData,uRxlen,r_UartBuf,0,r_UartLen);//将串口缓冲区的字符串拷贝到uRxData缓冲区
uRxlen +=r_UartLen;//地址+，等待下一次数据
halMcuWaitMs(5);//延时，串口读取数据需要一定的延时
r_UartLen =halUartRxLen();//读串口缓冲区，返回缓冲区的长度给r_UartLen
}
return uRxlen;
}

void ConfigRf_Init(void)
{
basicRfConfig.panId=PAN_ID;
basicRfConfig.channel=RF_CHANNEL;
basicRfConfig.myAddr=MY_ADDR;
basicRfConfig.ackRequest = TRUE;
while(basicRfInit(&basicRfConfig) == FAILED);
basicRfReceiveOn(); 
}

void main(void)
{
uint16 len = 0;
halBoardInit(); //模块相关资源的初始化
ConfigRf_Init(); //无线收发参数的配置初始化
halLedSet(3);
halLedSet(4);
while(1)
{
len = RecvUartData();//接收串口数据
if(len>0)
{
halLedToggle(3); //绿灯取反，无线发送指示
//把串口数据通过zigbee发送出去
basicRfSendPacket(SEND_ADDR,uRxData,len);
}
if(basicRfPacketIsReady()) //查询有无收到无线信号
{
halLedToggle(4);//红灯取反，无线接收
len=basicRfReceive(pRxData,MAX_RECV_BUF_LEN,NULL);//接收到的无线发送到串口数
halUartWrite(pRxData,len);
}
}
}
