xietiao.c
#include "OSAL.h"
#include "AF.h"
#include "ZDApp.h"
#include "ZDObject.h"
#include "ZDProfile.h"
#include <string.h>
//#include "xietiao.h"
//#include "GenericApp.h"
#include "xietiao.h"
#include "DebugTrace.h"

#if !defined( WIN32 )
  #include "OnBoard.h"
#endif

/* HAL */
#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_key.h"
#include "hal_uart.h"
#include "OSAL_Nv.h"
#include "aps_groups.h"
#define SEND_TO_ALL_EVENT 0x01 
// This list should be filled with Application specific Cluster IDs.
const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
{
  GENERICAPP_CLUSTERID
};//进行簇列表的轮询

const SimpleDescriptionFormat_t GenericApp_SimpleDesc=  
{  
  GENERICAPP_ENDPOINT,  
  GENERICAPP_PROFID,  
  GENERICAPP_DEVICEID,  
  GENERICAPP_DEVICE_VERSION,  
  GENERICAPP_FLAGS,  
  GENERICAPP_MAX_CLUSTERS,   
 (cId_t*)GenericApp_ClusterList,   
  0,  
  (cId_t *)NULL  
};  
devStates_t GenericApp_NwkState; 
endPointDesc_t GenericApp_epDesc;//节点描述符  
byte GenericApp_TaskID;//任务优先级  
byte GenericApp_TransID;//数据发送序列号。  
void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );//处理事件
void GenericApp_SendTheMessage( void );//发送数据 
//static void rxCB(uint8 port,uint8 envent);  
void GenericApp_Init( byte task_id )//任务初始化函数
{
  //halUARTCfg_t uartConfig;//串口初始化
  GenericApp_TaskID = task_id;//初始化任务优先级
  GenericApp_TransID = 0;//将发送数据包的序列号初始化

  GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
  GenericApp_epDesc.task_id = &GenericApp_TaskID;
  GenericApp_epDesc.simpleDesc
            = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
  GenericApp_epDesc.latencyReq = noLatencyReqs;//对节点描述符进行描述

  afRegister( &GenericApp_epDesc );//使用afRegister函数将节点描述符进行注册
    halUARTCfg_t uartConfig;  
  uartConfig.configured =TRUE;  
  uartConfig.baudRate   =HAL_UART_BR_115200;  
  uartConfig.flowControl=FALSE;  
  uartConfig.callBackFunc=NULL;  
  HalUARTOpen(0,&uartConfig); 
}

UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )  
{  
  afIncomingMSGPacket_t *MSGpkt;  
  // HalLedBlink(HAL_LED_1,0,50,500);  
  if ( events & SYS_EVENT_MSG )  
  {  
    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    while ( MSGpkt )  
    {  
      switch ( MSGpkt->hdr.event )  
      {  
         case AF_INCOMING_MSG_CMD:  //天线接收到数据  
        //  HalLedBlink(HAL_LED_2,0,50,500);  
          GenericApp_MessageMSGCB( MSGpkt );   //接收数据并把数据发送到UART  
         break;               
        default:  
          break;  
      }  
      // Release the memory  
      osal_msg_deallocate( (uint8 *)MSGpkt );  
      // Next  
      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    }  
    // return unprocessed events  
    return (events ^ SYS_EVENT_MSG);  
  }  
  return 0;  
}  

void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )  
{  
  RFTX rftx;  
  unsigned char changeline[2]={0x0A,0x0D};  
  switch ( pkt->clusterId )  
  {  
  
    case GENERICAPP_CLUSTERID:  
      osal_memcpy(&rftx,pkt->cmd.Data,sizeof(rftx));  
      HalUARTWrite(0,rftx.databuf,sizeof(rftx));  //从这一行你就能看到联合体的作用、好处  
      HalUARTWrite(0,changeline,2);    
      break;  
  }  
}  

xietiao.h
#ifndef xietiao_H
#define xietiao_H

#include "ZComDef.h"

#define GENERICAPP_ENDPOINT             10

#define GENERICAPP_PROFID               0X0F04
#define GENERICAPP_DEVICEID             0X0001
#define GENERICAPP_DEVICE_VERSION       0
#define GENERICAPP_FLAGS                0
#define GENERICAPP_MAX_CLUSTERS        1
#define GENERICAPP_CLUSTERID            1
/*typedef union h
{
uint8 TEMP[4];
struct RFRXBUF
{
unsigned char Head;
unsigned char value[2];
unsigned char Tail;
}BUF;
}TEMPERATURE; */

/*typedef struct RFTXBUF
{
 uint8 myNWK[4];
 uint8 myMAC[16];
 uint8 pNWK[4];
 uint8 pMAC[16]; 
}RFTX;*/

/*typedef struct rftx{  
   uint8 type[3];  
   uint8 myNWK[4];  
   uint8 pNWK[4];  
  }RFTX;  */

typedef union h  
{  
 unsigned char databuf[18];  
 struct RFRXBUF  
 {  
  unsigned char head[2];  //  "&&"  
  unsigned char type[3];  //  "ROU"或 "END"  
  unsigned char myNWK[4]; //  自身的网络地址  
  unsigned char pNWK[4];  //  父节点的网络地址  
  unsigned char value[4];  // value[0]表采集数据的类型  如：W表温度  V表电压 后面几位表数值  
  unsigned char tail;     //"&"  
 }BUF;  
}RFTX;  

extern void GenericApp_Init( byte task_id );
extern UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events );

#endif
sensor.h
#ifndef sensor_H
#define sensor_H
#include <hal_types.h>
extern uint16 getvol(void);
extern int8 readTemp(void);  
extern unsigned int getVddvalue(void); 
#endif
sensor.c
#include "sensor.h"
#include <ioCC2530.h>
#define ADC_REF_115V 0x00  
#define ADC_DEC_256  0x20  
#define ADC_CHN_TEMP 0x0e  
#define ADC_DEC_064      0x00  
#define ADC_CHN_VDD3     0x0f  

uint16 getvol(void)
{
uint32 value;
    APCFG  |=1;   
        P0SEL  |= (1 << (0));	
        P0DIR  &= ~(1 << (0)); // ADC初始化
   ADCIF = 0;   //清ADC 中断标志
   //采用基准电压avdd5:3.3V，通道0，启动AD转化
   ADCCON3 = (0x80 | 0x10 | 0x00);//10010000
   while ( !ADCIF )
   {
       ;  //等待AD转化结束
   }
   value = ADCH;
   value = value<< 8;
   value |= ADCL;
  // AD值转化成电压值
  // 0 表示 0V ，32768 表示 3.3V
  // 电压值 = (value*3.3)/32768 （V)
  value = (value * 330);
  value = value >> 15;   // 除以32768
  // 返回分辨率为0.01V的电压值
  return (uint16)value;
}    //片外电压
int8 readTemp(void)  
{  
 static uint16 reference_voltage;  
 static uint8  bCalibrate=TRUE;  
   
 unsigned char tmpADCCON3=ADCCON3;//????????  
 uint16 value;  
 int8 temp;  
  
 ATEST=0x01;  //使能温度传感器  
 TR0|=0x01;   //连接温度传感器  
 ADCIF=0;     //?????  
  
 ADCCON3=(ADC_REF_115V|ADC_DEC_256|ADC_CHN_TEMP);//???????  
   
 while(!ADCIF)//???????  
   ;  
 ADCIF=0;  
   
 value=ADCL;                   //这里应该是取低位  
 value |=((uint16)ADCH)<<8;   //这里应该是取高位  
   
 value>>=4;//除以16？？？  
   
 if(bCalibrate)//记录第一次读取的温度值，用于校正温度数据  
 {  
   reference_voltage=value;  
   bCalibrate=FALSE;     
 }  
   
 temp=22+((value-reference_voltage)/4);//温度校正函数  
 return temp;  
   
}  
  
unsigned int getVddvalue(void)  
{  
 unsigned int value;  
 unsigned char tmpADCCON3=ADCCON3;  
 ADCIF=0;  
 ADCCON3=(ADC_REF_115V|ADC_DEC_064|ADC_CHN_VDD3);  
 while(!ADCIF)  
   ;  
 value=ADCH;  
 ADCCON3=tmpADCCON3;  
 return (value);  
}  
zhongduan.c或者router.c   //一定要有传感器才能测片外光照
#include "OSAL.h"
#include "AF.h"
#include "ZDApp.h"
#include "ZDObject.h"
#include "ZDProfile.h"
#include <string.h>
//#include "xietiao.h"
//#include "GenericApp.h"
#include "xietiao.h"
#include "DebugTrace.h"

#if !defined( WIN32 )
  #include "OnBoard.h"
#endif

/* HAL */
#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_key.h"
#include "hal_uart.h"
#include "OSAL_Nv.h"
#include "aps_groups.h"
#include "sensor.h"
#define SEND_DATA_EVENT 0x01
const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
{
  GENERICAPP_CLUSTERID
};//进行簇列表的轮询

const SimpleDescriptionFormat_t GenericApp_SimpleDesc=  
{  
  GENERICAPP_ENDPOINT,  
  GENERICAPP_PROFID,  
  GENERICAPP_DEVICEID,  
  GENERICAPP_DEVICE_VERSION,  
  GENERICAPP_FLAGS,  
  0,  
  (cId_t*)NULL,  
  GENERICAPP_MAX_CLUSTERS,  
  (cId_t*)GenericApp_ClusterList    
};  
endPointDesc_t GenericApp_epDesc;//节点描述符  
byte GenericApp_TaskID;          //任务优先级  
byte GenericApp_TransID;         //数据发送序列号  
devStates_t GenericApp_NwkState;//保存节点状态  
  
void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );  
void GenericApp_SendTheMessage( void );  
void SendInfo(void);  
void sendVdd(void);  
void sendTemp(void); 
void sendGua(void);
  
void To_string(uint8 *dest,char* src,uint8 length);//二进制书转化为十六进制数       
void GenericApp_Init( byte task_id )//任务初始化函数
{
  
  GenericApp_TaskID = task_id;//初始化任务优先级
  GenericApp_TransID = 0;//将发送数据包的序列号初始化
 GenericApp_NwkState = DEV_INIT;
  GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
  GenericApp_epDesc.task_id = &GenericApp_TaskID;
  GenericApp_epDesc.simpleDesc
            = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
  GenericApp_epDesc.latencyReq = noLatencyReqs;//对节点描述符进行描述

  afRegister( &GenericApp_epDesc );//使用afRegister函数将节点描述符进行注册
}

UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )  
{  
  afIncomingMSGPacket_t *MSGpkt;  
  if ( events & SYS_EVENT_MSG )  
  {  
    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    while ( MSGpkt )  
    {  
      switch ( MSGpkt->hdr.event )  
      {          
        case ZDO_STATE_CHANGE:  
          GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);  
          if ( (GenericApp_NwkState == DEV_ROUTER)  
              || (GenericApp_NwkState == DEV_END_DEVICE) )  
          {  
            osal_set_event(GenericApp_TaskID,SEND_DATA_EVENT);  
          }  
          break;  
        default:  
          break;  
      }  
      // Release the memory  
      osal_msg_deallocate( (uint8 *)MSGpkt );  
      // Next  
      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    }  
    // return unprocessed events  
    return (events ^ SYS_EVENT_MSG);  
  }  
   if ( events &  SEND_DATA_EVENT )  
  {  
    sendTemp();  
    sendVdd(); 
    sendGua();
         osal_start_timerEx( GenericApp_TaskID,  
                        SEND_DATA_EVENT,    //事件  
                           5000 );//定时时间  
    return (events ^ SEND_DATA_EVENT);  
  }  
  // Discard unknown events  
  return 0;  
}  
    
 void sendTemp(void)  
{  
 RFTX rftx;  
 uint16 nwk;  
 osal_memcpy(rftx.BUF.head,"&&",2);  
 if(GenericApp_NwkState==DEV_ROUTER)  
   osal_memcpy(rftx.BUF.type,"ROU",3);  
 if(GenericApp_NwkState==DEV_END_DEVICE)  
   osal_memcpy(rftx.BUF.type,"END",3);  
 nwk=NLME_GetShortAddr();  
 To_string(rftx.BUF.myNWK,(uint8*)&nwk,2);  
 nwk=NLME_GetCoordShortAddr();  
 To_string(rftx.BUF.pNWK,(uint8*)&nwk,2);  
   
 uint16 tempvalue;  
  
 tempvalue=readTemp();  
 rftx.BUF.value[0]='W';  
 rftx.BUF.value[1]=tempvalue/10+'0';  
 rftx.BUF.value[2]=tempvalue%10+'0';  
 rftx.BUF.value[3]='*';  
   
 rftx.BUF.tail='&';  
   
 afAddrType_t my_DstAddr;  
 my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;  
 my_DstAddr.endPoint=GENERICAPP_ENDPOINT;  
 my_DstAddr.addr.shortAddr=0x0000;  
 AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,GENERICAPP_CLUSTERID,  
                18,  
                (uint8*)&rftx,  
                &GenericApp_TransID,  
                AF_DISCV_ROUTE,  
                AF_DEFAULT_RADIUS);   
}  
  
void sendVdd(void)  
{  
 RFTX rftx;  
 uint16 nwk;  
 osal_memcpy(rftx.BUF.head,"&&",2);  
 if(GenericApp_NwkState==DEV_ROUTER)  
   osal_memcpy(rftx.BUF.type,"ROU",3);  
 if(GenericApp_NwkState==DEV_END_DEVICE)  
   osal_memcpy(rftx.BUF.type,"END",3);  
 nwk=NLME_GetShortAddr();  
 To_string(rftx.BUF.myNWK,(uint8*)&nwk,2);  
 nwk=NLME_GetCoordShortAddr();  
 To_string(rftx.BUF.pNWK,(uint8*)&nwk,2);  
   
 uint16 vddvalue;  
  
 vddvalue=69*getVddvalue()/256;  
 rftx.BUF.value[0]='V';  
 rftx.BUF.value[1]=vddvalue/10+'0';  
 rftx.BUF.value[2]='.';  
 rftx.BUF.value[3]=vddvalue%10+'0';   
   
 rftx.BUF.tail='&';  
   
 afAddrType_t my_DstAddr;  
 my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;  
 my_DstAddr.endPoint=GENERICAPP_ENDPOINT;  
 my_DstAddr.addr.shortAddr=0x0000;  
 AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,GENERICAPP_CLUSTERID,  
                18,  
                (uint8*)&rftx,  
                &GenericApp_TransID,  
                AF_DISCV_ROUTE,  
                AF_DEFAULT_RADIUS);  
  
}  
void sendGua(void)
{
RFTX rftx;  
 uint16 nwk;  
 osal_memcpy(rftx.BUF.head,"&&",2);  
 if(GenericApp_NwkState==DEV_ROUTER)  
   osal_memcpy(rftx.BUF.type,"ROU",3);  
 if(GenericApp_NwkState==DEV_END_DEVICE)  
   osal_memcpy(rftx.BUF.type,"END",3);  
 nwk=NLME_GetShortAddr();  
 To_string(rftx.BUF.myNWK,(uint8*)&nwk,2);  
 nwk=NLME_GetCoordShortAddr();  
 To_string(rftx.BUF.pNWK,(uint8*)&nwk,2);  
 
 uint16 guangvalue;
 guangvalue=getvol();
 rftx.BUF.value[0]='G';  
 rftx.BUF.value[1]=guangvalue/10+'0';  
 rftx.BUF.value[2]='.';  
 rftx.BUF.value[3]=guangvalue%10+'0'; 
 
 afAddrType_t my_DstAddr;  
 my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;  
 my_DstAddr.endPoint=GENERICAPP_ENDPOINT;  
 my_DstAddr.addr.shortAddr=0x0000;  
 AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,GENERICAPP_CLUSTERID,  
                18,  
                (uint8*)&rftx,  
                &GenericApp_TransID,  
                AF_DISCV_ROUTE,  
                AF_DEFAULT_RADIUS);  
 
}
  
void To_string(uint8 *dest,char* src,uint8 length)//二进制书转化为十六进制数  
{  
  uint8* xad;  
  uint8 i=0;  
  uint8 ch;  
  xad=src+length-1;  
  for(i=0;i<length;i++,xad--)  
  {  
   ch=(*xad>>4)&0x0F;  //除以十六  
   dest[i<<1]=ch+((ch<10)?'0':'7');  
   ch=*xad&0x0F;  
   dest[(i<<1)+1]=ch+((ch<10)?'0':'7');  
  }  
}  
