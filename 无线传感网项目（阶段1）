xietiao.c

#include "OSAL.h"
#include "AF.h"
#include "ZDApp.h"
#include "ZDObject.h"
#include "ZDProfile.h"
#include <string.h>
//#include "xietiao.h"
//#include "GenericApp.h"
#include "xietiao.h"
#include "DebugTrace.h"

#if !defined( WIN32 )
  #include "OnBoard.h"
#endif

/* HAL */
#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_key.h"
#include "hal_uart.h"
#include "OSAL_Nv.h"
#include "aps_groups.h"
#define SEND_TO_ALL_EVENT 0x01 
// This list should be filled with Application specific Cluster IDs.
const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
{
  GENERICAPP_CLUSTERID
};//进行簇列表的轮询

const SimpleDescriptionFormat_t GenericApp_SimpleDesc=  
{  
  GENERICAPP_ENDPOINT,  
  GENERICAPP_PROFID,  
  GENERICAPP_DEVICEID,  
  GENERICAPP_DEVICE_VERSION,  
  GENERICAPP_FLAGS,  
  GENERICAPP_MAX_CLUSTERS,   
 (cId_t*)GenericApp_ClusterList,   
  0,  
  (cId_t *)NULL  
};  
devStates_t GenericApp_NwkState; 
endPointDesc_t GenericApp_epDesc;//节点描述符  
byte GenericApp_TaskID;//任务优先级  
byte GenericApp_TransID;//数据发送序列号。  
void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );//处理事件
void GenericApp_SendTheMessage( void );//发送数据 
//static void rxCB(uint8 port,uint8 envent);  
void GenericApp_Init( byte task_id )//任务初始化函数
{
  //halUARTCfg_t uartConfig;//串口初始化
  GenericApp_TaskID = task_id;//初始化任务优先级
  GenericApp_TransID = 0;//将发送数据包的序列号初始化

  GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
  GenericApp_epDesc.task_id = &GenericApp_TaskID;
  GenericApp_epDesc.simpleDesc
            = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
  GenericApp_epDesc.latencyReq = noLatencyReqs;//对节点描述符进行描述

  afRegister( &GenericApp_epDesc );//使用afRegister函数将节点描述符进行注册
    halUARTCfg_t uartConfig;  
  uartConfig.configured =TRUE;  
  uartConfig.baudRate   =HAL_UART_BR_115200;  
  uartConfig.flowControl=FALSE;  
  uartConfig.callBackFunc=NULL;  
  HalUARTOpen(0,&uartConfig); 
}

UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )  
{  
  afIncomingMSGPacket_t *MSGpkt;  
  // HalLedBlink(HAL_LED_1,0,50,500);  
  if ( events & SYS_EVENT_MSG )  
  {  
    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    while ( MSGpkt )  
    {  
      switch ( MSGpkt->hdr.event )  
      {  
         case AF_INCOMING_MSG_CMD:  //天线接收到数据  
        //  HalLedBlink(HAL_LED_2,0,50,500);  
          GenericApp_MessageMSGCB( MSGpkt );   //接收数据并把数据发送到UART  
         break;               
        default:  
          break;  
      }  
      // Release the memory  
      osal_msg_deallocate( (uint8 *)MSGpkt );  
      // Next  
      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    }  
    // return unprocessed events  
    return (events ^ SYS_EVENT_MSG);  
  }  
  return 0;  
}  

void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )  
{  
  RFTX rftx;  
  unsigned char changeline[2]={0x0A,0x0D};  
  switch ( pkt->clusterId )  
  {  
  
    case GENERICAPP_CLUSTERID:  
      osal_memcpy(&rftx,pkt->cmd.Data,sizeof(rftx));  
      HalUARTWrite(0,rftx.databuf,sizeof(rftx));  //从这一行你就能看到联合体的作用、好处  
      HalUARTWrite(0,changeline,2);    
      break;  
  }  
}  
xietiao.h

#ifndef xietiao_H
#define xietiao_H

#include "ZComDef.h"

#define GENERICAPP_ENDPOINT             10

#define GENERICAPP_PROFID               0X0F04
#define GENERICAPP_DEVICEID             0X0001
#define GENERICAPP_DEVICE_VERSION       0
#define GENERICAPP_FLAGS                0
#define GENERICAPP_MAX_CLUSTERS        1
#define GENERICAPP_CLUSTERID            1
/*typedef union h
{
uint8 TEMP[4];
struct RFRXBUF
{
unsigned char Head;
unsigned char value[2];
unsigned char Tail;
}BUF;
}TEMPERATURE; */

/*typedef struct RFTXBUF
{
 uint8 myNWK[4];
 uint8 myMAC[16];
 uint8 pNWK[4];
 uint8 pMAC[16]; 
}RFTX;*/

/*typedef struct rftx{  
   uint8 type[3];  
   uint8 myNWK[4];  
   uint8 pNWK[4];  
  }RFTX;  */

typedef union h  
{  
 unsigned char databuf[18];  
 struct RFRXBUF  
 {  
  unsigned char head[2];  //  "&&"  
  unsigned char type[3];  //  "ROU"或 "END"  
  unsigned char myNWK[4]; //  自身的网络地址  
  unsigned char pNWK[4];  //  父节点的网络地址  
  unsigned char value[4];  // value[0]表采集数据的类型  如：W表温度  V表电压 后面几位表数值  
  unsigned char tail;     //"&"  
 }BUF;  
}RFTX;  

extern void GenericApp_Init( byte task_id );
extern UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events );

#endif

zhongduan.c或者route.c
#include "OSAL.h"
#include "AF.h"
#include "ZDApp.h"
#include "ZDObject.h"
#include "ZDProfile.h"
#include <string.h>
//#include "xietiao.h"
//#include "GenericApp.h"
#include "xietiao.h"
#include "DebugTrace.h"

#if !defined( WIN32 )
  #include "OnBoard.h"
#endif

/* HAL */
#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_key.h"
#include "hal_uart.h"
#include "OSAL_Nv.h"
#include "aps_groups.h"
#include "sensor.h"
#define SEND_DATA_EVENT 0x01
const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
{
  GENERICAPP_CLUSTERID
};//进行簇列表的轮询

const SimpleDescriptionFormat_t GenericApp_SimpleDesc=  
{  
  GENERICAPP_ENDPOINT,  
  GENERICAPP_PROFID,  
  GENERICAPP_DEVICEID,  
  GENERICAPP_DEVICE_VERSION,  
  GENERICAPP_FLAGS,  
  0,  
  (cId_t*)NULL,  
  GENERICAPP_MAX_CLUSTERS,  
  (cId_t*)GenericApp_ClusterList    
};  
endPointDesc_t GenericApp_epDesc;//节点描述符  
byte GenericApp_TaskID;          //任务优先级  
byte GenericApp_TransID;         //数据发送序列号  
devStates_t GenericApp_NwkState;//保存节点状态  
  
void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );  
void GenericApp_SendTheMessage( void );  
void SendInfo(void);  
void sendVdd(void);  
void sendTemp(void); 
void sendGua(void);
  
void To_string(uint8 *dest,char* src,uint8 length);//二进制书转化为十六进制数       
void GenericApp_Init( byte task_id )//任务初始化函数
{
  
  GenericApp_TaskID = task_id;//初始化任务优先级
  GenericApp_TransID = 0;//将发送数据包的序列号初始化
 GenericApp_NwkState = DEV_INIT;
  GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
  GenericApp_epDesc.task_id = &GenericApp_TaskID;
  GenericApp_epDesc.simpleDesc
            = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
  GenericApp_epDesc.latencyReq = noLatencyReqs;//对节点描述符进行描述

  afRegister( &GenericApp_epDesc );//使用afRegister函数将节点描述符进行注册
}

UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )  
{  
  afIncomingMSGPacket_t *MSGpkt;  
  if ( events & SYS_EVENT_MSG )  
  {  
    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    while ( MSGpkt )  
    {  
      switch ( MSGpkt->hdr.event )  
      {          
        case ZDO_STATE_CHANGE:  
          GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);  
          if ( (GenericApp_NwkState == DEV_ROUTER)  
              || (GenericApp_NwkState == DEV_END_DEVICE) )  
          {  
            osal_set_event(GenericApp_TaskID,SEND_DATA_EVENT);  
          }  
          break;  
        default:  
          break;  
      }  
      // Release the memory  
      osal_msg_deallocate( (uint8 *)MSGpkt );  
      // Next  
      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );  
    }  
    // return unprocessed events  
    return (events ^ SYS_EVENT_MSG);  
  }  
   if ( events &  SEND_DATA_EVENT )  
  {  
    sendTemp();  
    sendVdd(); 
    sendGua();
         osal_start_timerEx( GenericApp_TaskID,  
                        SEND_DATA_EVENT,    //事件  
                           5000 );//定时时间  
    return (events ^ SEND_DATA_EVENT);  
  }  
  // Discard unknown events  
  return 0;  
}  
    
 void sendTemp(void)  
{  
 RFTX rftx;  
 uint16 nwk;  
 osal_memcpy(rftx.BUF.head,"&&",2);  
 if(GenericApp_NwkState==DEV_ROUTER)  
   osal_memcpy(rftx.BUF.type,"ROU",3);  
 if(GenericApp_NwkState==DEV_END_DEVICE)  
   osal_memcpy(rftx.BUF.type,"END",3);  
 nwk=NLME_GetShortAddr();  
 To_string(rftx.BUF.myNWK,(uint8*)&nwk,2);  
 nwk=NLME_GetCoordShortAddr();  
 To_string(rftx.BUF.pNWK,(uint8*)&nwk,2);  
   
 uint16 tempvalue;  
  
 tempvalue=readTemp();  
 rftx.BUF.value[0]='W';  
 rftx.BUF.value[1]=tempvalue/10+'0';  
 rftx.BUF.value[2]=tempvalue%10+'0';  
 rftx.BUF.value[3]='*';  
   
 rftx.BUF.tail='&';  
   
 afAddrType_t my_DstAddr;  
 my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;  
 my_DstAddr.endPoint=GENERICAPP_ENDPOINT;  
 my_DstAddr.addr.shortAddr=0x0000;  
 AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,GENERICAPP_CLUSTERID,  
                18,  
                (uint8*)&rftx,  
                &GenericApp_TransID,  
                AF_DISCV_ROUTE,  
                AF_DEFAULT_RADIUS);   
}  
  
void sendVdd(void)  
{  
 RFTX rftx;  
 uint16 nwk;  
 osal_memcpy(rftx.BUF.head,"&&",2);  
 if(GenericApp_NwkState==DEV_ROUTER)  
   osal_memcpy(rftx.BUF.type,"ROU",3);  
 if(GenericApp_NwkState==DEV_END_DEVICE)  
   osal_memcpy(rftx.BUF.type,"END",3);  
 nwk=NLME_GetShortAddr();  
 To_string(rftx.BUF.myNWK,(uint8*)&nwk,2);  
 nwk=NLME_GetCoordShortAddr();  
 To_string(rftx.BUF.pNWK,(uint8*)&nwk,2);  
   
 uint16 vddvalue;  
  
 vddvalue=69*getVddvalue()/256;  
 rftx.BUF.value[0]='V';  
 rftx.BUF.value[1]=vddvalue/10+'0';  
 rftx.BUF.value[2]='.';  
 rftx.BUF.value[3]=vddvalue%10+'0';   
   
 rftx.BUF.tail='&';  
   
 afAddrType_t my_DstAddr;  
 my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;  
 my_DstAddr.endPoint=GENERICAPP_ENDPOINT;  
 my_DstAddr.addr.shortAddr=0x0000;  
 AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,GENERICAPP_CLUSTERID,  
                18,  
                (uint8*)&rftx,  
                &GenericApp_TransID,  
                AF_DISCV_ROUTE,  
                AF_DEFAULT_RADIUS);  
  
}  
void sendGua(void)
{
RFTX rftx;  
 uint16 nwk;  
 osal_memcpy(rftx.BUF.head,"&&",2);  
 if(GenericApp_NwkState==DEV_ROUTER)  
   osal_memcpy(rftx.BUF.type,"ROU",3);  
 if(GenericApp_NwkState==DEV_END_DEVICE)  
   osal_memcpy(rftx.BUF.type,"END",3);  
 nwk=NLME_GetShortAddr();  
 To_string(rftx.BUF.myNWK,(uint8*)&nwk,2);  
 nwk=NLME_GetCoordShortAddr();  
 To_string(rftx.BUF.pNWK,(uint8*)&nwk,2);  
 
 uint16 guangvalue;
 guangvalue=getvol();
 rftx.BUF.value[0]='G';  
 rftx.BUF.value[1]=guangvalue/10+'0';  
 rftx.BUF.value[2]='.';  
 rftx.BUF.value[3]=guangvalue%10+'0'; 
 
 afAddrType_t my_DstAddr;  
 my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;  
 my_DstAddr.endPoint=GENERICAPP_ENDPOINT;  
 my_DstAddr.addr.shortAddr=0x0000;  
 AF_DataRequest(&my_DstAddr,&GenericApp_epDesc,GENERICAPP_CLUSTERID,  
                18,  
                (uint8*)&rftx,  
                &GenericApp_TransID,  
                AF_DISCV_ROUTE,  
                AF_DEFAULT_RADIUS);  
 
}
  
void To_string(uint8 *dest,char* src,uint8 length)//二进制书转化为十六进制数  
{  
  uint8* xad;  
  uint8 i=0;  
  uint8 ch;  
  xad=src+length-1;  
  for(i=0;i<length;i++,xad--)  
  {  
   ch=(*xad>>4)&0x0F;  //除以十六  
   dest[i<<1]=ch+((ch<10)?'0':'7');  
   ch=*xad&0x0F;  
   dest[(i<<1)+1]=ch+((ch<10)?'0':'7');  
  }  
}  
sh10.c
/**************************************************************************************************
  Filename:      sh10.c

  Description:    sh10 driver 
                  
**************************************************************************************************/

/******************************************************************************
 * INCLUDES
 */
#include "ioCC2530.h"
#include "hal_defs.h"
#include "sh10.h"

#define BM(n)      (1 << (n))

#define MCU_IO_TRISTATE   1             
#define MCU_IO_PULLUP     2
#define MCU_IO_PULLDOWN   3

#define MCU_IO_OUTPUT(port, pin, val)  MCU_IO_OUTPUT_PREP(port, pin, val)
#define MCU_IO_OUTPUT_PREP(port, pin, val)  st( P##port##SEL &= ~BM(pin); P##port##_##pin## = val; P##port##DIR |= BM(pin); )
#define MCU_IO_INPUT(port, pin, func)  MCU_IO_INPUT_PREP(port, pin, func)
#define MCU_IO_INPUT_PREP(port, pin, func)  st( P##port##SEL &= ~BM(pin); P##port##DIR &= ~BM(pin); switch (func) { case MCU_IO_PULLUP: P##port##INP &= ~BM(pin); P2INP &= ~BM(port + 5); break; case MCU_IO_PULLDOWN: P##port##INP &= ~BM(pin); P2INP |= BM(port + 5); break; default: P##port##INP |= BM(pin); break; } )
#define MCU_IO_GET(port, pin)          MCU_IO_GET_PREP(port, pin)
#define MCU_IO_GET_PREP(port, pin)          (P##port## & BM(pin))


#if defined (BOARD_OLD)
/***********旧板IO设置********************/
#define HAL_BOARD_IO_SHT_SCK_PORT           2
#define HAL_BOARD_IO_SHT_SCK_PIN             4
#define HAL_BOARD_IO_SHT_SDA_PORT           2
#define HAL_BOARD_IO_SHT_SDA_PIN             3
#else
/***********新板板IO设置********************/
#define HAL_BOARD_IO_SHT_SCK_PORT           1
#define HAL_BOARD_IO_SHT_SCK_PIN             6
#define HAL_BOARD_IO_SHT_SDA_PORT           1
#define HAL_BOARD_IO_SHT_SDA_PIN             5
#endif


#define HAL_SHT_SCK_DIR_OUT()          MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,0)
#define HAL_SHT_SCK_SET()                  MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,1)
#define HAL_SHT_SCK_CLR()                  MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SCK_PORT, HAL_BOARD_IO_SHT_SCK_PIN,0)

#define HAL_SHT_SDA_SET()                 MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,1)
#define HAL_SHT_SDA_CLR()                 MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,0)
#define HAL_SHT_SDA_DIR_OUT()         MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,1)
#define HAL_SHT_SDA_DIR_IN()           MCU_IO_INPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,2)
#define HAL_SHT_SDA_VAL()                MCU_IO_GET(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN)     




#define ACK 1
#define noACK 0
#define measure_temp 0x03 //测量温度命令
#define measure_humi 0x05 //测量湿度命令
#define RESET        0x1e //软启动

#define     uchar    unsigned   char
#define     uint     unsigned   int
#define     ulong    unsigned   long

//------------------------数据结构体定义---------------------------
typedef union                      //保存所测得的温度＆湿度值
{ 
	uint  i;
	float f;
} value;
//WENSHIDU S;






/******************************************************************************
 * LOCAL FUNCTIONS
 */

void SHT11_DELAY(uint16 usec);
char write_byte(unsigned char value); 	  
char read_byte(unsigned char ack);		
void transstart(void);
char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode);
void calc_sth11(float *p_humidity ,float *p_temperature);


#define SENSOR_SHT10





#if defined SENSOR_SHT10

void SHT11_DELAY(uint16 usec)
{
	usec >>= 1;
	
	while (usec--)
	{
		asm("NOP"); 
		asm("NOP");  
		asm("NOP");  
		asm("NOP");
		
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
		
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
		
		asm("NOP");
		asm("NOP");
		asm("NOP");
		asm("NOP");
	}	
}




char write_byte(unsigned char value)
{ 
  	unsigned char  i,error=0;

	for (i=0x80;i>0;i/=2)           
	{ 
		if (i & value) 
			HAL_SHT_SDA_SET();           
		else 
			HAL_SHT_SDA_CLR();

		HAL_SHT_SCK_SET();               
		SHT11_DELAY(1);                    
		HAL_SHT_SCK_CLR();
	}
	
	HAL_SHT_SDA_SET();                 
	HAL_SHT_SDA_DIR_IN();
	HAL_SHT_SCK_SET();               
	error=HAL_SHT_SDA_VAL();         
	HAL_SHT_SCK_CLR();

	return error;                   
}

char read_byte(unsigned char ack)
{ 
	unsigned char i,val=0;

	HAL_SHT_SDA_SET();                
	HAL_SHT_SDA_DIR_IN();
	for (i=0x80;i>0;i/=2)            
	{ 
		HAL_SHT_SCK_SET();               
		if (HAL_SHT_SDA_VAL()) 
			val=(val | i);               
		HAL_SHT_SCK_CLR();
	}
	MCU_IO_OUTPUT(HAL_BOARD_IO_SHT_SDA_PORT, HAL_BOARD_IO_SHT_SDA_PIN,!ack);  
	HAL_SHT_SCK_SET();                            
	SHT11_DELAY(1);                             
	HAL_SHT_SCK_CLR();						    
	HAL_SHT_SDA_SET();                         

	return val;
}

void transstart(void)
{
	HAL_SHT_SCK_SET();
	SHT11_DELAY(1); 
	HAL_SHT_SDA_CLR();
	SHT11_DELAY(1);  
	HAL_SHT_SCK_CLR();
	SHT11_DELAY(2); 
	HAL_SHT_SCK_SET();
	SHT11_DELAY(1); 

	HAL_SHT_SDA_SET(); 
	SHT11_DELAY(1); 
	HAL_SHT_SCK_CLR();
	SHT11_DELAY(2); 
	HAL_SHT_SDA_CLR();	
}

void connectionreset(void)
{  
	unsigned char i; 
	HAL_SHT_SDA_SET(); 
	HAL_SHT_SCK_CLR();                   
	for(i=0;i<9;i++)                    
	{ 
		HAL_SHT_SCK_SET();
		HAL_SHT_SCK_CLR();
	}
	transstart();                   
}

char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{ 
	unsigned char error=0;
	unsigned int i;

	connectionreset();
	switch(mode)
	{                    
		case 0	: error+=write_byte(measure_temp); break;
		case 1	: error+=write_byte(measure_humi); break;
		default     : break;	 
	}
	
	HAL_SHT_SDA_DIR_IN();
	for (i=0;i<65535;i++)
	{
		SHT11_DELAY(10); 
		if(HAL_SHT_SDA_VAL()== 0) break;
	}                               
	if(HAL_SHT_SDA_VAL())
	{
		error+=1;
	}
	
	*(p_value+1)  =read_byte(ACK);   
	*(p_value)=read_byte(ACK);       
	*p_checksum =read_byte(noACK);          
	return error;
}
/******************************************************************************
 * 名称       calc_sth11
 * 功能       计算温湿度值
 * 入口参数   float *p_humidity ,float *p_temperature
                湿度                  温度
 * 出口参数   无
 *****************************************************************************/
void calc_sth11(float *p_humidity ,float *p_temperature)      
{ 
	const float C1=-4.0;              
	const float C2=+0.0405;         
	const float C3=-0.0000028;      
	const float T1=+0.01;             
	const float T2=+0.00008;           
	float rh=*p_humidity;            
	float t=*p_temperature;          
	float rh_lin;                     
	float rh_true;                    
	float t_C;                        
	t_C=t*0.01 - 40;                    
	rh_lin=C3*rh*rh + C2*rh + C1;       
	rh_true=(t_C-25)*(T1+T2*rh)+rh_lin; 
	if(rh_true>100)rh_true=100;         
	if(rh_true<0.1)rh_true=0.1;         
	*p_temperature=t_C;                 
	*p_humidity=rh_true;                
}

/******************************************************************************
 * 名称       call_sht11
 * 功能       读取SH1x温湿度值
 * 入口参数   void call_sht11(unsigned int *tem_val,unsigned int *hum_val)
            *tem_val:温度存放地址，0.1度分辨率
            *hum_val:湿度存放地址，0.1分辨率
 * 出口参数  无  
 *****************************************************************************/
void call_sht11(unsigned int *tem_val,unsigned int *hum_val)
{ 
	value humi_val,temp_val;
	unsigned char error = 0,checksum;
        *tem_val=0;
        *hum_val=0;
        //启动SH1x的湿度测量
       	error+=s_measure((unsigned char*) &humi_val.i,&checksum,1); 
        //启动SH1x的温度测量
	error+=s_measure((unsigned char*) &temp_val.i,&checksum,0);  
	if(error!=0)
	{   //测试错误，进行软复位
	    connectionreset();                                       
	}
	else
	{   //测试数据处理
            humi_val.f=(float)humi_val.i;                    
	    temp_val.f=(float)temp_val.i;
            //计算温湿度实际值
	    calc_sth11(&humi_val.f,&temp_val.f);
            //转化成0.1的分辨率
            *tem_val=temp_val.f*10;
            *hum_val=humi_val.f*10;
	}    
}

#endif

sh10.h
/*************************************************************************************************
  Filename:       sh10.h
 
 *****/


#ifndef SIMPLE_SH10_H
#define SIMPLE_SH10_H

extern  void call_sht11(unsigned int *tem, unsigned int *hum); 
extern  void connectionreset(void);
#endif

sensor.c
#include "sensor.h"
#include <ioCC2530.h>
#include "sh10.h"
#define ADC_REF_115V 0x00  
#define ADC_DEC_256  0x20  
#define ADC_CHN_TEMP 0x0e  
#define ADC_DEC_064      0x00  
#define ADC_CHN_VDD3     0x0f  

uint16 getvol(void)
{
uint32 value;
    APCFG  |=1;   
        P0SEL  |= (1 << (0));	
        P0DIR  &= ~(1 << (0)); // ADC初始化
   ADCIF = 0;   //清ADC 中断标志
   //采用基准电压avdd5:3.3V，通道0，启动AD转化
   ADCCON3 = (0x80 | 0x10 | 0x00);//10010000
   while ( !ADCIF )
   {
       ;  //等待AD转化结束
   }
   value = ADCH;
   value = value<< 8;
   value |= ADCL;
  // AD值转化成电压值
  // 0 表示 0V ，32768 表示 3.3V
  // 电压值 = (value*3.3)/32768 （V)
  value = (value * 330);
  value = value >> 15;   // 除以32768
  // 返回分辨率为0.01V的电压值
  return (uint16)value;
}    //片外电压

int8 readTemp(void)  
{  
unsigned int sensor_tem,sensor_val;
call_sht11( &sensor_tem, &sensor_val);
 int8 temp;  
temp=(sensor_tem/10); 
 return temp;  
   
}  
  
unsigned int getVddvalue(void)  
{  
 unsigned int value;  
 unsigned int sensor_tem,sensor_val;
  call_sht11( &sensor_tem, &sensor_val);
  value=(sensor_val/10);
 return (value);  
}  
sensor.h

#ifndef sensor_H
#define sensor_H
#include <hal_types.h>
extern uint16 getvol(void);
extern int8 readTemp(void);  
extern unsigned int getVddvalue(void); 
#endif

hal_defs.h
//-------------------------------------------------------------------
// Filename: hal_defs.h
// Description: HAL defines
//-------------------------------------------------------------------
//-------------------------------------------------------------------
// INCLUDES
//-------------------------------------------------------------------
#include <ioCC2530.h>

//-------------------------------------------------------------------
// TYPEDEFS
//-------------------------------------------------------------------
typedef signed char int8;
typedef unsigned char uint8;

typedef signed short int16;
typedef unsigned short uint16;

typedef signed long int32;
typedef unsigned long uint32;

typedef void(*ISR_FUNC_PTR)(void);
typedef void(*VFPTR)(void);

//-------------------------------------------------------------------
// CONSTANTS AND DEFINES
//-------------------------------------------------------------------
#define TRUE 1
#define FALSE 0
#define NULL (void *)0

#define SUCCESS 0
#define FAILED  1

//-------------------------------------------------------------------
// MACROS
//-------------------------------------------------------------------
#define BV(n)      (1 << (n))

#define BM(n)      (1 << (n))

#define BF(x,b,s)  (((x) & (b)) >> (s))

#define MIN(n,m)   (((n) < (m)) ? (n) : (m))

#define MAX(n,m)   (((n) < (m)) ? (m) : (n))

#define ABS(n)     (((n) < 0) ? -(n) : (n))

// uint32 processing 
#define BREAK_UINT32( var, ByteNum ) (uint8)((uint32)(((var) >>((ByteNum) * 8)) & 0x00FF))
#define BUILD_UINT32(Byte0, Byte1, Byte2, Byte3) ((uint32)((uint32)((Byte0) & 0x00FF) + ((uint32)((Byte1) & 0x00FF) << 8) + ((uint32)((Byte2) & 0x00FF) << 16) + ((uint32)((Byte3) & 0x00FF) << 24)))

#define HI_UINT32(a) ((uint16) (((uint32)(a)) >> 16))
#define LO_UINT32(a) ((uint16) ((uint32)(a)))

// uint16 processing 
#define BUILD_UINT16(loByte, hiByte) ((uint16)(((loByte) & 0x00FF) + (((hiByte) & 0x00FF) << 8)))

#define HI_UINT16(a) (((uint16)(a) >> 8) & 0xFF)
#define LO_UINT16(a) ((uint16)(a) & 0xFF)

// uint16 processing 
#define BUILD_UINT8(hiByte, loByte) ((uint8)(((loByte) & 0x0F) + (((hiByte) & 0x0F) << 4)))

#define HI_UINT8(a) (((uint8)(a) >> 4) & 0x0F)
#define LO_UINT8(a) ((uint8)(a) & 0x0F)

//-------------------------------------------------------------------
//  This macro is for use by other macros to form a fully valid C statement.
//  Without this, the if/else conditionals could show unexpected behavior.
//
//  For example, use...
//    #define SET_REGS()  st( ioreg1 = 0; ioreg2 = 0; )
//  instead of ...
//    #define SET_REGS()  { ioreg1 = 0; ioreg2 = 0; }
//  or
//    #define  SET_REGS()    ioreg1 = 0; ioreg2 = 0;
//  The last macro would not behave as expected in the if/else construct.
//  The second to last macro will cause a compiler error in certain uses
//  of if/else construct
//
//  It is not necessary, or recommended, to use this macro where there is
//  already a valid C statement.  For example, the following is redundant...
//    #define CALL_FUNC()   st(  func();  )
//  This should simply be...
//    #define CALL_FUNC()   func()
//
// (The while condition below evaluates false without generating a
//  constant-controlling-loop type of warning on most compilers.)
//-------------------------------------------------------------------
#define st(x)      do { x } while (__LINE__ == -1)

//-------------------------------------------------------------------
// Compiler abstraction
//-------------------------------------------------------------------
#define _PRAGMA(x) _Pragma(#x)

#define FAR
#define NOP()  asm("NOP")

#define HAL_MCU_LITTLE_ENDIAN()  __LITTLE_ENDIAN__
#define HAL_ISR_FUNC_DECLARATION(f,v) _PRAGMA(vector=v) __near_func __interrupt void f(void)
#define HAL_ISR_FUNC_PROTOTYPE(f,v) _PRAGMA(vector=v) __near_func __interrupt void f(void)
#define HAL_ISR_FUNCTION(f,v) HAL_ISR_FUNC_PROTOTYPE(f,v); HAL_ISR_FUNC_DECLARATION(f,v)
