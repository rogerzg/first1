xietiao.c
#include "OSAL.h"
#include "AF.h"
#include "ZDApp.h"
#include "ZDObject.h"
#include "ZDProfile.h"
#include <string.h>
//#include "xietiao.h"
//#include "GenericApp.h"
#include "xietiao.h"
#include "DebugTrace.h"

#if !defined( WIN32 )
  #include "OnBoard.h"
#endif

/* HAL */
#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_key.h"
#include "hal_uart.h"
#include "OSAL_Nv.h"
#include "aps_groups.h"

#define SEND_TO_ALL_EVENT 0X01
// This list should be filled with Application specific Cluster IDs.
const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
{
  GENERICAPP_CLUSTERID
};//进行簇列表的轮询

const SimpleDescriptionFormat_t GenericApp_SimpleDesc =//对zigbee设备进行描述
{
  GENERICAPP_ENDPOINT,              //  int Endpoint;
  GENERICAPP_PROFID,                //  uint16 AppProfId[2];
  GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
  GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
  GENERICAPP_FLAGS,                 //  int   AppFlags:4;
  GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
  (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
  GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
  (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
};


//aps_Group_t GenericApp_Group; 
endPointDesc_t GenericApp_epDesc;//对于一个节点描述符
byte GenericApp_TaskID;//任务优先级定义
//devStates_t GenericApp_NwkState;

byte GenericApp_TransID;//数据发送序列号

//void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );//消息处理函数
//void GenericApp_SendTheMessage( void );//数据发送函数


void GenericApp_Init( byte task_id )//任务初始化函数
{
  //halUARTCfg_t uartConfig;//串口初始化
  GenericApp_TaskID = task_id;//初始化任务优先级
  GenericApp_TransID = 0;//将发送数据包的序列号初始化

  GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
  GenericApp_epDesc.task_id = &GenericApp_TaskID;
  GenericApp_epDesc.simpleDesc
            = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
  GenericApp_epDesc.latencyReq = noLatencyReqs;//对节点描述符进行描述

  afRegister( &GenericApp_epDesc );//使用afRegister函数将节点描述符进行注册
 
}

UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
{
  return 0;
}
 
 
router.c
#include "OSAL.h"
#include "AF.h"
#include "ZDApp.h"
#include "ZDObject.h"
#include "ZDProfile.h"
#include <string.h>
//#include "xietiao.h"
//#include "GenericApp.h"
#include "xietiao.h"
#include "DebugTrace.h"
#include <stdlib.h>

#if !defined( WIN32 )
  #include "OnBoard.h"
#endif

/* HAL */
#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_key.h"
#include "hal_uart.h"
#include "OSAL_Nv.h"
#include "aps_groups.h"
#define SHOW_INFO_EVENT 0X01

const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
{
  GENERICAPP_CLUSTERID
};//进行簇列表的轮询

const SimpleDescriptionFormat_t GenericApp_SimpleDesc =//对zigbee设备进行描述
{
  GENERICAPP_ENDPOINT,              //  int Endpoint;
  GENERICAPP_PROFID,                //  uint16 AppProfId[2];
  GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
  GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
  GENERICAPP_FLAGS,                 //  int   AppFlags:4;
  GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
  (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
  GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
  (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
};
//aps_Group_t GenericApp_Group; 
endPointDesc_t GenericApp_epDesc;//对于一个节点描述符
byte GenericApp_TaskID;//任务优先级定义
devStates_t GenericApp_NwkState;

byte GenericApp_TransID;//数据发送序列号

void ShowInfo(void);
void To_string(uint8 *dest,char *src,uint8 length);

typedef struct RFTXBUF
{
uint8 myNWK[4];
uint8 myMAC[16];
uint8 pNWK[4];
uint8 pMAC[16];
}RFTX;
void GenericApp_Init( byte task_id )//任务初始化函数
{
  halUARTCfg_t uartConfig;//串口初始化
  GenericApp_TaskID = task_id;//初始化任务优先级
  GenericApp_TransID = 0;//将发送数据包的序列号初始化
  GenericApp_NwkState = DEV_INIT;
  GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
  GenericApp_epDesc.task_id = &GenericApp_TaskID;
  GenericApp_epDesc.simpleDesc
            = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
  GenericApp_epDesc.latencyReq = noLatencyReqs;//对节点描述符进行描述

  afRegister( &GenericApp_epDesc );//使用afRegister函数将节点描述符进行注册
  
   uartConfig.configured = TRUE;
   uartConfig.baudRate = HAL_UART_BR_115200;
   uartConfig.flowControl = FALSE;
   uartConfig.callBackFunc = NULL;
   HalUARTOpen (0,&uartConfig);
}

UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
{
  afIncomingMSGPacket_t *MSGpkt;//定义一个指向接收消息结构体的指针
  if ( events & SYS_EVENT_MSG )//对于事件进行判断
  {
    MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );//从操作系统里面得到接收信息
    while ( MSGpkt )//为真有消息
    {
      switch ( MSGpkt->hdr.event )//MSGpkt指向hdr.event事件
      {      
      case ZDO_STATE_CHANGE:
        GenericApp_NwkState=(devStates_t)(MSGpkt->hdr.status);
        if(GenericApp_NwkState == DEV_ROUTER)
        {
        osal_set_event(GenericApp_TaskID,SHOW_INFO_EVENT);
        }
        break;
          default:
          break;
          }
       osal_msg_deallocate( (uint8 *)MSGpkt ); //清空内存 必做
      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
      }
    return (events ^ SYS_EVENT_MSG);
    }
  if(events & SHOW_INFO_EVENT)
  {
  ShowInfo();
  osal_start_timerEx(GenericApp_TaskID,SHOW_INFO_EVENT,5000);
  return (events ^ SHOW_INFO_EVENT);
  }
  return 0;
}
void ShowInfo(void)
{
RFTX rftx;
uint16 nwk;
uint8 buf[8];
uint8 changline[2]={0x0a,0x0d};
nwk=NLME_GetShortAddr();
To_string(rftx.myNWK,(uint8*)&nwk,2);
To_string(rftx.myMAC,NLME_GetExtAddr(),8);
nwk=NLME_GetCoordShortAddr();
To_string(rftx.pNWK,(uint8*)&nwk,2);
NLME_GetCoordExtAddr(buf);
To_string(rftx.pMAC,buf,8);
HalUARTWrite(0,"NWK:",10);
HalUARTWrite(0,rftx.myNWK,4);
HalUARTWrite(0,"MAC:",10);
HalUARTWrite(0,rftx.myMAC,16);
HalUARTWrite(0,"p-NWK:",10);
HalUARTWrite(0,rftx.pNWK,4);
HalUARTWrite(0,"p-MAC:",10);
HalUARTWrite(0,rftx.pMAC,16);
HalUARTWrite(0,changline,2);
}
void To_string(uint8 *dest,char *src,uint8 length)
{
uint8 *xad;
uint8 i=0;
uint8 ch;
xad =src +length -1;
for (i=0;i<length;i++,xad--)
{
ch = (*xad >>4)&0x0f;
dest[i<<1] =ch+ ((ch<10)? '0':'7');
ch =*xad & 0x0f;
dest[(i<<1)+1]=ch + ((ch<10)?'0':'7');
}
}
 
